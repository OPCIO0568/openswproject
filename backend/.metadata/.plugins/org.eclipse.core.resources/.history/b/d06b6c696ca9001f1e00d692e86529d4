package fundsite.fund_web_backend.service;

import java.util.Optional;

import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import fundsite.fund_web_backend.model.User;
import fundsite.fund_web_backend.repository.UserRepository;
import fundsite.fund_web_backend.util.JwtTokenProvider;
import jakarta.transaction.Transactional;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final JwtTokenProvider jwtTokenProvider;

    public UserService(UserRepository userRepository, JwtTokenProvider jwtTokenProvider) {
        this.userRepository = userRepository;
        this.jwtTokenProvider = jwtTokenProvider;
    }

    @Transactional
    public void addBalanceByUsername(String username, Double amount) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found with nickname: " + username));

        // Update balance
        user.setBalance(user.getBalance() + amount);
        userRepository.save(user);
    }

    public User getUserByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + username));
    }

    public String loginUser(String username, String password) {
        Optional<User> user = userRepository.findByUsername(username);
        if (user.isPresent() && user.get().getPassword().equals(password)) {
            // JWT 토큰 생성
            return jwtTokenProvider.generateToken(username);
        }
        throw new RuntimeException("Invalid username or password");
    }

    public User registerUser(User user) {
        user.setBalance(0.0); // 신규 회원의 보유 금액은 0으로 초기화
        return userRepository.save(user);
    }

    public Optional<User> findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
}
