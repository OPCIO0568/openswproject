package fundsite.fund_web_backend.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import fundsite.fund_web_backend.model.Donation;
import fundsite.fund_web_backend.service.DonationService;

@RestController
@RequestMapping("/api/donations")
public class DonationController {

    @Autowired
    private DonationService donationService;


    /**
     * 상위 3개의 기부 항목 반환
     */
    @GetMapping("/top3")
    public List<Donation> getTopDonations() {
        return donationService.getTop3Donations();
    }

    /**
     * 제목 또는 기부 타입으로 기부 항목 검색
     */
    @GetMapping("/search")
    public List<Donation> searchDonations(
            @RequestParam(required = false) String title,
            @RequestParam(required = false) Long donationType) {
        if (title != null) {
            return donationService.getDonationsByTitle(title);
        } else if (donationType != null) {
            return donationService.getDonationsByType(donationType);
        } else {
            throw new IllegalArgumentException("검색 조건(title 또는 donationType)을 하나 이상 제공해야 합니다.");
        }
    }

    /**
     * 기부 처리
     * @param id 기부 항목 ID
     * @param payload 기부 금액 포함한 요청 데이터
     * @param authorizationHeader 인증 토큰
     */
    @PostMapping("/donate")
    public ResponseEntity<String> donate(
            @PathVariable Long id,
            @RequestBody Map<String, Object> payload,
            @RequestHeader("Authorization") String authorizationHeader) {

        // Authorization 헤더에서 토큰 추출
        String token = authorizationHeader.replace("Bearer ", "");

        // 기부 금액 추출
        double amount = Double.parseDouble(payload.get("amount").toString());

        // 기부 처리 (토큰과 기부 ID만 전달)
        donationService.donate(id, token, amount);

        return ResponseEntity.ok("Donation successful");
    }
}
