package fundsite.fund_web_backend.controller;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import fundsite.fund_web_backend.model.DonationHistory;
import fundsite.fund_web_backend.model.User;
import fundsite.fund_web_backend.service.DonationHistoryService;
import fundsite.fund_web_backend.service.UserService;

@RestController
@RequestMapping("/api/users")
public class UserController {

    private static final Logger logger = LoggerFactory.getLogger(UserController.class);
    
    @Autowired
    private final UserService userService;
    private final DonationHistoryService donationHistoryService;

    public UserController(UserService userService, DonationHistoryService donationHistoryService) {
        this.userService = userService;
        this.donationHistoryService = donationHistoryService;
    }

    @GetMapping("/mypage")
    public ResponseEntity<?> getUserInfo(@RequestHeader("Authorization") String authorizationHeader) {
        try {
            String token = authorizationHeader.replace("Bearer ", "");
            logger.debug("Authorization token: " + token);

            if (!userService.validateToken(token)) {
                logger.warn("Invalid token provided for /mypage");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid or expired token");
            }

            User user = userService.getUserFromToken(token);
            return ResponseEntity.ok(user);
        } catch (Exception e) {
            logger.error("Error in /mypage endpoint: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred");
        }
    }

    @GetMapping("/donations")
    public ResponseEntity<?> getUserDonations(@RequestHeader("Authorization") String authorizationHeader) {
        try {
            String token = authorizationHeader.replace("Bearer ", "");
            logger.debug("Authorization token for donations: " + token);

            if (!userService.validateToken(token)) {
                logger.warn("Invalid token provided for /donations");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid or expired token");
            }

            List<DonationHistory> donationHistories = donationHistoryService.getDonationHistoriesByToken(token);
            return ResponseEntity.ok(donationHistories);
        } catch (Exception e) {
            logger.error("Error in /donations endpoint: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred");
        }
    }

    @PostMapping("/balance/add")
    public ResponseEntity<?> addBalance(
            @RequestHeader("Authorization") String authorizationHeader,
            @RequestBody Map<String, Double> payload) {
        try {
            String token = authorizationHeader.replace("Bearer ", "");
            logger.debug("Authorization token for add balance: " + token);

            Double amount = payload.get("amount");
            userService.addBalanceByToken(token, amount);
            return ResponseEntity.ok(Map.of("message", "Balance added successfully"));
        } catch (Exception e) {
            logger.error("Error in /balance/add endpoint: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred");
        }
    }
}
